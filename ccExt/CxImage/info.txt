
		//SaveBitmapAsJpeg(sFile, bmp, 90, FALSE);
		SaveBitmapAsPngFile(sFile, bmp);
		SaveToFile(bmp, sFile);
		SaveBitmapAsTiff(sFile, bmp);




BOOL IsDIBOpaque(HBITMAP hbm)
{
    DWORD cdw;
    BYTE *pb;
    BITMAP bm;
    GetObject(hbm, sizeof(BITMAP), &bm);
    if (bm.bmBitsPixel <= 24)
        return TRUE;
    cdw = bm.bmWidth * bm.bmHeight;
    pb = (BYTE *)bm.bmBits;
    while(cdw-- && pb)
    {
        pb++; pb++; pb++;
        if (*pb++ != 0xFF)
            return FALSE;
    }
    return TRUE;
}

BOOL SaveBitmapAsTiff(LPCSTR pszFileName, HBITMAP hbm)
{
    BITMAP bm;
    BOOL no_alpha;
    TIFF *tif;
    BITMAPINFO bi;
    LONG widthbytes;
    BYTE *pbBits, *pb;
    INT c, y;
    BOOL f;
    HDC hdc;

    if (!GetObject(hbm, sizeof(BITMAP), &bm))
        return FALSE;

    ZeroMemory(&bi.bmiHeader, sizeof(BITMAPINFOHEADER));
    bi.bmiHeader.biSize     = sizeof(BITMAPINFOHEADER);
    bi.bmiHeader.biWidth    = bm.bmWidth;
    bi.bmiHeader.biHeight   = bm.bmHeight;
    bi.bmiHeader.biPlanes   = 1;
    
    no_alpha = (bm.bmBitsPixel <= 24 || IsDIBOpaque(hbm));
    bi.bmiHeader.biBitCount = no_alpha ? 24 : 32;
#define WIDTHBYTES(i) (((i) + 31) / 32 * 4)
    widthbytes = WIDTHBYTES(bm.bmWidth * bi.bmiHeader.biBitCount);
    pbBits = (BYTE *)malloc(widthbytes * bm.bmHeight);
    if (pbBits == NULL)
        return FALSE;

    hdc = CreateCompatibleDC(NULL);
    if (!GetDIBits(hdc, hbm, 0, bm.bmHeight, pbBits, &bi, DIB_RGB_COLORS))
    {
        free(pbBits);
        DeleteDC(hdc);
        return FALSE;
    }
    DeleteDC(hdc);

    tif = TIFFOpen(pszFileName, "w");
    if (tif == NULL)
    {
        free(pbBits);
        return FALSE;
    }

    TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, bm.bmWidth);
    TIFFSetField(tif, TIFFTAG_IMAGELENGTH, bm.bmHeight);
    TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 8);
    TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, no_alpha ? 3 : 4);
    TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 1);
    TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_LZW);
    TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);
    TIFFSetField(tif, TIFFTAG_FILLORDER, FILLORDER_MSB2LSB);
    TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);
    TIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);
    TIFFSetField(tif, TIFFTAG_SOFTWARE, "uuware's software");
    f = TRUE;
    for(y = 0; y < bm.bmHeight; y++)
    {
        pb = &pbBits[(bm.bmHeight - 1 - y) * widthbytes];
        c = bm.bmWidth;
        if (no_alpha)
        {
            BYTE b;
            while(c--)
            {
                b = pb[2];
                pb[2] = *pb;
                *pb = b;
                pb++; pb++; pb++;
            }
        }
        else
        {
            BYTE b;
            while(c--)
            {
                b = pb[2];
                pb[2] = *pb;
                *pb = b;
                pb++; pb++; pb++; pb++;
            }
        }
        if (TIFFWriteScanline(tif, 
            &pbBits[(bm.bmHeight - 1 - y) * widthbytes], y, 0) < 0)
        {
            f = FALSE;
            break;
        }
    }
    TIFFClose(tif);

    if (!f)
        DeleteFileA(pszFileName);

    free(pbBits);
    return f;
}

BOOL SaveBitmapAsJpeg(const TCHAR* pszFileName, HBITMAP hbm, INT quality, BOOL progression)
{
    FILE *fp;
    BITMAP bm;
    struct jpeg_compress_struct comp;
    struct jpeg_error_mgr jerr;
    JSAMPLE * image_buffer;
    BITMAPINFO bi;
    HDC hDC, hMemDC;
    LPBYTE pbBits;
    INT nWidthBytes;
    DWORD cbBits;
    BOOL f;
 
    if (GetObject(hbm, sizeof(BITMAP), &bm) != sizeof(BITMAP))
        return FALSE;
 
    fp = _tfopen(pszFileName, _T("wb"));
    if (fp == NULL)
        return FALSE;
    
    comp.err = jpeg_std_error(&jerr);
    jpeg_create_compress(&comp);
    jpeg_stdio_dest(&comp, fp);
    
    comp.image_width  = bm.bmWidth;
    comp.image_height = bm.bmHeight;
    comp.input_components = 3;
    comp.in_color_space = JCS_RGB;
    jpeg_set_defaults(&comp);
    jpeg_set_quality(&comp, quality, FALSE);
    if (progression)
        jpeg_simple_progression(&comp);
 
	// 2x2, 1x1, 1x1 (4:1:1) : High (default sub sampling)
	comp.comp_info[0].h_samp_factor = 2;
	comp.comp_info[0].v_samp_factor = 2;
	comp.comp_info[1].h_samp_factor = 1;
	comp.comp_info[1].v_samp_factor = 1;
	comp.comp_info[2].h_samp_factor = 1;
	comp.comp_info[2].v_samp_factor = 1;

	comp.density_unit=1;
	comp.X_density=(unsigned short)96;
	comp.Y_density=(unsigned short)96;

	jpeg_start_compress(&comp, TRUE);
    ZeroMemory(&bi, sizeof(BITMAPINFOHEADER));
    bi.bmiHeader.biSize     = sizeof(BITMAPINFOHEADER);
    bi.bmiHeader.biWidth    = bm.bmWidth;
    bi.bmiHeader.biHeight   = bm.bmHeight;
    bi.bmiHeader.biPlanes   = 1;
    bi.bmiHeader.biBitCount = 24;

    f = FALSE;
#define WIDTHBYTES(i) (((i) + 31) / 32 * 4)
    nWidthBytes = WIDTHBYTES(bm.bmWidth * 24);
    cbBits = nWidthBytes * bm.bmHeight;
    pbBits = (LPBYTE)HeapAlloc(GetProcessHeap(), 0, cbBits);
    if (pbBits != NULL)
    {
        image_buffer = (JSAMPLE *)HeapAlloc(GetProcessHeap(), 0, nWidthBytes);
        if (image_buffer != NULL)
        {
            hDC = GetDC(NULL);
            if (hDC != NULL)
            {
                hMemDC = CreateCompatibleDC(hDC);
                if (hMemDC != NULL)
                {
                    f = GetDIBits(hMemDC, hbm, 0, bm.bmHeight, pbBits, 
                                  (BITMAPINFO*)&bi, DIB_RGB_COLORS);
                    DeleteDC(hMemDC);
                }
                ReleaseDC(NULL, hDC);
            }
            if (f)
            {
                INT x, y;
                LPBYTE src, dest;
                for(y = 0; y < bm.bmHeight; y++)
                {
                    dest = image_buffer;
                    src = &pbBits[(bm.bmHeight - y - 1) * nWidthBytes];
                    for(x = 0; x < bm.bmWidth; x++)
                    {
                        *dest++ = *src++;
                        *dest++ = *src++;
                        *dest++ = *src++;
                    }
                    jpeg_write_scanlines(&comp, &image_buffer, 1);
                }
            }
            HeapFree(GetProcessHeap(), 0, image_buffer);
        }
        HeapFree(GetProcessHeap(), 0, pbBits);
    }
 
    jpeg_finish_compress(&comp);
    jpeg_destroy_compress(&comp);
 
    fclose(fp);
    if (!f)
    {
        DeleteFile(pszFileName);
        return FALSE;
    }
    return TRUE;
}

BOOL SaveBitmapAsJpegxx(const TCHAR* pszFileName, HBITMAP hbm, INT quality, BOOL progression)
{
    FILE *fp;
    BITMAP bm;
    struct jpeg_compress_struct comp;
    struct jpeg_error_mgr jerr;
    JSAMPLE * image_buffer;
    BITMAPINFO bi;
    HDC hDC, hMemDC;
    LPBYTE pbBits;
    INT nWidthBytes;
    DWORD cbBits;
    BOOL f;
 
    if (GetObject(hbm, sizeof(BITMAP), &bm) != sizeof(BITMAP))
        return FALSE;
 
    fp = _tfopen(pszFileName, _T("wb"));
    if (fp == NULL)
        return FALSE;
    
    comp.err = jpeg_std_error(&jerr);
    jpeg_create_compress(&comp);
    jpeg_stdio_dest(&comp, fp);
    
    comp.image_width  = bm.bmWidth;
    comp.image_height = bm.bmHeight;
    comp.input_components = 3;
    comp.in_color_space = JCS_RGB;
    jpeg_set_defaults(&comp);
    jpeg_set_quality(&comp, quality, TRUE);
    if (progression)
        jpeg_simple_progression(&comp);
 
    jpeg_start_compress(&comp, TRUE);
    ZeroMemory(&bi, sizeof(BITMAPINFOHEADER));
    bi.bmiHeader.biSize     = sizeof(BITMAPINFOHEADER);
    bi.bmiHeader.biWidth    = bm.bmWidth;
    bi.bmiHeader.biHeight   = bm.bmHeight;
    bi.bmiHeader.biPlanes   = 1;
    bi.bmiHeader.biBitCount = 24;
 
    f = FALSE;
#define WIDTHBYTES(i) (((i) + 31) / 32 * 4)
    nWidthBytes = WIDTHBYTES(bm.bmWidth * 24);
    cbBits = nWidthBytes * bm.bmHeight;
    pbBits = (LPBYTE)HeapAlloc(GetProcessHeap(), 0, cbBits);
    if (pbBits != NULL)
    {
        image_buffer = (JSAMPLE *)HeapAlloc(GetProcessHeap(), 0, nWidthBytes);
        if (image_buffer != NULL)
        {
            hDC = GetDC(NULL);
            if (hDC != NULL)
            {
                hMemDC = CreateCompatibleDC(hDC);
                if (hMemDC != NULL)
                {
                    f = GetDIBits(hMemDC, hbm, 0, bm.bmHeight, pbBits, 
                                  (BITMAPINFO*)&bi, DIB_RGB_COLORS);
                    DeleteDC(hMemDC);
                }
                ReleaseDC(NULL, hDC);
            }
            if (f)
            {
                INT x, y;
                LPBYTE src, dest;
                for(y = 0; y < bm.bmHeight; y++)
                {
                    dest = image_buffer;
                    src = &pbBits[(bm.bmHeight - y - 1) * nWidthBytes];
                    for(x = 0; x < bm.bmWidth; x++)
                    {
                        *dest++ = *src++;
                        *dest++ = *src++;
                        *dest++ = *src++;
                    }
                    jpeg_write_scanlines(&comp, &image_buffer, 1);
                }
            }
            HeapFree(GetProcessHeap(), 0, image_buffer);
        }
        HeapFree(GetProcessHeap(), 0, pbBits);
    }
 
    jpeg_finish_compress(&comp);
    jpeg_destroy_compress(&comp);
 
    fclose(fp);
    if (!f)
    {
        DeleteFile(pszFileName);
        return FALSE;
    }
    return TRUE;
}

#define WIDTHBYTES(i) (((i) + 31) / 32 * 4)
BOOL SaveBitmapAsPngFile(const TCHAR* pszFileName, HBITMAP hbm)
{
    png_structp png;
    png_infop info;
    png_color_8 sBIT;
    png_bytep *lines;
    FILE *outf;
    HDC hMemDC;
    BITMAPINFO bi;
    BITMAP bm;
    DWORD dwWidthBytes, cbBits;
    LPBYTE pbBits;
    BOOL f;
    INT y;
    INT nDepth;
    
    if (GetObject(hbm, sizeof(BITMAP), &bm) != sizeof(BITMAP))
        return FALSE;

    nDepth = (bm.bmBitsPixel == 32 ? 32 : 24);
    dwWidthBytes = WIDTHBYTES(bm.bmWidth * nDepth);
    cbBits = dwWidthBytes * bm.bmHeight;
    pbBits = (LPBYTE)HeapAlloc(GetProcessHeap(), 0, cbBits);
    if (pbBits == NULL)
        return FALSE;

    f = FALSE;
    hMemDC = CreateCompatibleDC(NULL);
    if (hMemDC != NULL)
    {
        ZeroMemory(&bi, sizeof(BITMAPINFOHEADER));
        bi.bmiHeader.biSize     = sizeof(BITMAPINFOHEADER);
        bi.bmiHeader.biWidth    = bm.bmWidth;
        bi.bmiHeader.biHeight   = bm.bmHeight;
        bi.bmiHeader.biPlanes   = 1;
        bi.bmiHeader.biBitCount = (WORD)nDepth;
        f = GetDIBits(hMemDC, hbm, 0, bm.bmHeight, pbBits, &bi, 
                      DIB_RGB_COLORS);
        DeleteDC(hMemDC);
    }
    if (!f)
    {
        HeapFree(GetProcessHeap(), 0, pbBits);
        return FALSE;
    }

    outf = _tfopen(pszFileName, _T("wb"));
    if (!outf)
    {
        HeapFree(GetProcessHeap(), 0, pbBits);
        return FALSE;
    }

    png = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (png == NULL)
    {
        HeapFree(GetProcessHeap(), 0, pbBits);
        fclose(outf);
        DeleteFile(pszFileName);
        return FALSE;
    }

    info = png_create_info_struct(png);
    if (info == NULL)
    {
        HeapFree(GetProcessHeap(), 0, pbBits);
        png_destroy_write_struct(&png, NULL);
        fclose(outf);
        DeleteFile(pszFileName);
        return FALSE;
    }

    lines = NULL;
    if (setjmp(png_jmpbuf(png)))
    {
        HeapFree(GetProcessHeap(), 0, pbBits);
        if (lines != NULL)
            HeapFree(GetProcessHeap(), 0, lines);
        fclose(outf);
        DeleteFile(pszFileName);
        return FALSE;
    }

    png_init_io(png, outf);
    png_set_IHDR(png, info, bm.bmWidth, bm.bmHeight, 8, 
        (nDepth == 32 ? PNG_COLOR_TYPE_RGB_ALPHA : PNG_COLOR_TYPE_RGB),
        PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_BASE);

    sBIT.red = 8;
    sBIT.green = 8;
    sBIT.blue = 8;
    sBIT.alpha = (png_byte)(nDepth == 32 ? 8 : 0);
    png_set_sBIT(png, info, &sBIT);

    png_write_info(png, info);
    png_set_bgr(png);

    lines = (png_bytep *)HeapAlloc(GetProcessHeap(), 0, 
                                   sizeof(png_bytep *) * bm.bmHeight);
    for (y = 0; y < bm.bmHeight; y++)
        lines[y] = (png_bytep)&pbBits[dwWidthBytes * (bm.bmHeight - y - 1)];

    png_write_image(png, lines);
    png_write_end(png, info);
    png_destroy_write_struct(&png, &info);

    HeapFree(GetProcessHeap(), 0, pbBits);
    HeapFree(GetProcessHeap(), 0, lines);
    fclose(outf);

    return TRUE;
}


BOOL SaveToFile(HBITMAP hBitmap, LPCTSTR lpszFileName)
{
	HDC hDC;
	int iBits;
	WORD wBitCount;
	DWORD dwPaletteSize=0, dwBmBitsSize=0, dwDIBSize=0, dwWritten=0;
	BITMAP Bitmap;
	BITMAPFILEHEADER bmfHdr;
	BITMAPINFOHEADER bi;
	LPBITMAPINFOHEADER lpbi;
	HANDLE fh, hDib, hPal,hOldPal=NULL;
  
	hDC = CreateDC(_T("DISPLAY"), NULL, NULL, NULL);
	iBits = GetDeviceCaps(hDC, BITSPIXEL) * GetDeviceCaps(hDC, PLANES);
	DeleteDC(hDC);
	if(iBits <= 1)
	{
		wBitCount = 1;
	}
	else if(iBits <= 4)
	{
		wBitCount = 4;
	}
	else if(iBits <= 8)
	{
		wBitCount = 8;
	}
	else
	{
		wBitCount = 24;
	}

	GetObject(hBitmap, sizeof(Bitmap), (LPSTR)&Bitmap);
	bi.biSize = sizeof(BITMAPINFOHEADER);
	bi.biWidth = Bitmap.bmWidth;
	bi.biHeight = Bitmap.bmHeight;
	bi.biPlanes = 1;
	bi.biBitCount = wBitCount;
	bi.biCompression = BI_RGB;
	bi.biSizeImage = 0;
	bi.biXPelsPerMeter = 0;
	bi.biYPelsPerMeter = 0;
	bi.biClrImportant = 0;
	bi.biClrUsed = 0;
	dwBmBitsSize = ((Bitmap.bmWidth * wBitCount + 31) / 32) * 4 * Bitmap.bmHeight;

	hDib = GlobalAlloc(GHND,dwBmBitsSize + dwPaletteSize + sizeof(BITMAPINFOHEADER));
	lpbi = (LPBITMAPINFOHEADER)GlobalLock(hDib);
	*lpbi = bi;

	hPal = GetStockObject(DEFAULT_PALETTE);
	if(hPal)
	{ 
		hDC = GetDC(NULL);
		hOldPal = SelectPalette(hDC, (HPALETTE)hPal, FALSE);
		RealizePalette(hDC);
	}
  

	GetDIBits(hDC, hBitmap, 0, (UINT) Bitmap.bmHeight, (LPSTR)lpbi + sizeof(BITMAPINFOHEADER) 
	+dwPaletteSize, (BITMAPINFO *)lpbi, DIB_RGB_COLORS);

	if(hOldPal)
	{
		SelectPalette(hDC, (HPALETTE)hOldPal, TRUE);
		RealizePalette(hDC);
		ReleaseDC(NULL, hDC);
	}

	fh = CreateFile(lpszFileName, GENERIC_WRITE,0, NULL, CREATE_ALWAYS, 
	FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL); 
  
	if(fh == INVALID_HANDLE_VALUE)
	{
		return FALSE;
	}

	bmfHdr.bfType = 0x4D42; // "BM"
	dwDIBSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwPaletteSize + dwBmBitsSize;
	bmfHdr.bfSize = dwDIBSize;
	bmfHdr.bfReserved1 = 0;
	bmfHdr.bfReserved2 = 0;
	bmfHdr.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER) + dwPaletteSize;

	WriteFile(fh, (LPSTR)&bmfHdr, sizeof(BITMAPFILEHEADER), &dwWritten, NULL);

	WriteFile(fh, (LPSTR)lpbi, dwDIBSize, &dwWritten, NULL);
	GlobalUnlock(hDib);
	GlobalFree(hDib);
	CloseHandle(fh);
	return TRUE;
}

